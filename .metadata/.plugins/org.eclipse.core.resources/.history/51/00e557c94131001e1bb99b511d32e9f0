package com.example.security;

//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;
//import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;
//import org.springframework.security.web.SecurityFilterChain;
//
////@Configuration
////@EnableWebSecurity
////public class SecurityConfig extends WebSecurityConfigurerAdapter {
////    @Override
////    protected void configure(HttpSecurity http) throws Exception {
////        http
////            .authorizeRequests()
////                .antMatchers("/login", "/css/**").permitAll() // Allow access to login page and CSS files
////                .anyRequest().authenticated()
////            .and()
////            .formLogin()
////                .loginPage("/login") // Custom login page
////                .defaultSuccessUrl("/home") // Redirect to home page after successful login
////            .and()
////            .logout()
////                .invalidateHttpSession(true) // Invalidate session on logout
////                .deleteCookies("JSESSIONID")
////                .logoutSuccessUrl("/login"); // Redirect to login page after logout
////    }
////}
//
//@Configuration
//@EnableWebSecurity
//public class SecurityConfig {
//
//    @Bean
//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//        http
//            .authorizeRequests()
//                .antMatchers("/login", "/css/**").permitAll()
//                .anyRequest().authenticated()
//        .and()
//            .formLogin()
//                .loginPage("/login")
//                .defaultSuccessUrl("/home")
//        .and()
//            .logout()
//                .invalidateHttpSession(true)
//                .deleteCookies("JSESSIONID")
//                .logoutSuccessUrl("/login");
//
//        // Configure UserDetailsService
//        http.authenticationManager(authenticationManagerBean())
//            .userDetailsService(userDetailsService());
//
//        return http.build();
//    }
//
//    @Bean
//    public UserDetailsService userDetailsService() {
//        return new InMemoryUserDetailsManager(
//            new User("user", "password", Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")))
//        );
//    }
//
//    @Bean
//    public AuthenticationManager authenticationManagerBean() throws Exception {
//        return new AuthenticationManagerBuilder()
//            .userDetailsService(userDetailsService())
//            .build();
//    }
//
//}


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	@Bean
	public UserDetailsService userDetailsService() throws Exception{
		UserDetails admin=User.builder()
				.username("samal")
				.password(passwordEncoder().encode("123"))
				.roles("ADMIN")
				.build();
		UserDetails user=User.builder()
				.username("john")
				.password(passwordEncoder().encode("456"))
				.roles("USER")
				.build();
		return new InMemoryUserDetailsManager(admin,user);
	}
	@SuppressWarnings("removal")
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http.authorizeHttpRequests((authorize)->authorize.anyRequest().authenticated())
			.formLogin().loginPage("/login").permitAll();
		return http.build();
	}

    @Bean
    public PasswordEncoder passwordEncoder() {
    	return new BCryptPasswordEncoder();
    }

}


